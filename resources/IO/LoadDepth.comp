#version 430 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0) uniform sampler2D r_load_depth;
layout (r32f, binding = 1) writeonly uniform image2D rw_load_depth;



///// Uniforms /////
layout (binding = 10, std140) uniform cb_t
{
    vec4 render_size;
    vec4 presentation_size;
    vec4 delta;
    vec2 jitter_offset;
    float depth_diff_threshold_sr;
    float color_diff_threshold_fg;
    float depth_diff_threshold_fg;
    float depth_scale;
    float depth_bias;
    float render_scale;
} cb;



void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    const vec4 bitShift = vec4(1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0));
    vec4 inputD = texelFetch(r_load_depth, pos, 0) * bitShift;
    float d = inputD.x + inputD.y + inputD.z + inputD.w;
    d = d * cb.depth_scale + cb.depth_bias;
    
    imageStore(rw_load_depth, pos, vec4(d));
}
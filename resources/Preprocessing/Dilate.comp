#version 430 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D r_input_depth;
layout (binding = 1) uniform sampler2D r_input_motion_vector;
layout (r32f, binding = 2) writeonly uniform image2D rw_current_depth;
layout (rg16f, binding = 3) writeonly uniform image2D rw_current_motion_vector;



///// Uniforms /////
layout (binding = 10, std140) uniform cb_t
{
    vec4 render_size;
    vec4 presentation_size;
    vec4 delta;
    vec2 jitter_offset;
    float depth_diff_threshold_sr;
    float color_diff_threshold_fg;
    float depth_diff_threshold_fg;
    float depth_scale;
    float depth_bias;
    float render_scale;
} cb;



void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    
    const ivec2 offsets[8] =
    {
        ivec2(-1, -1),
        ivec2(-1, 0),
        ivec2(-1, 1),
        ivec2(0, -1),
        ivec2(0, 1),
        ivec2(1, -1),
        ivec2(1, 0),
        ivec2(1, 1)
    };

    ivec2 nearestPos = pos;
    float nearestDepth = texelFetch(r_input_depth, pos, 0).x;

    for (int i = 0; i < 8; i++)
    {
        ivec2 samplePos = clamp(pos + offsets[i], ivec2(0, 0), ivec2(cb.render_size));
        float d = texelFetch(r_input_depth, samplePos, 0).x;
        if (d < nearestDepth)
        {
            nearestPos = samplePos;
            nearestDepth = d;
        }
    }
    
    vec2 mv = texelFetch(r_input_motion_vector, nearestPos, 0).xy;
    
    imageStore(rw_current_depth, pos, vec4(nearestDepth));
    imageStore(rw_current_motion_vector, pos, vec4(mv, 0, 0));
}
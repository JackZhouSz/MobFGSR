/* 
 *        Interpolation version 
 */

#version 430 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0) uniform usampler2D r_filled_reprojection;
layout (binding = 1) uniform sampler2D r_current_color_input_fg;
layout (binding = 2) uniform sampler2D r_previous_color_input_fg;
layout (binding = 3) uniform sampler2D r_current_depth;
layout (binding = 4) uniform sampler2D r_previous_depth;
layout (binding = 5) uniform sampler2D r_current_motion_vector;
layout (binding = 6) uniform sampler2D r_previous_motion_vector;
layout (rgba8, binding =7) writeonly uniform image2D rw_frame_generation_result;
layout (binding = 8) uniform sampler2D r_sample_lut;



///// Uniforms /////
layout (binding = 10, std140) uniform cb_t
{
    vec4 render_size;
    vec4 presentation_size;
    vec4 delta;
    vec2 jitter_offset;
    float depth_diff_threshold_sr;
    float color_diff_threshold_fg;
    float depth_diff_threshold_fg;
    float depth_scale;
    float depth_bias;
    float render_scale;
} cb;

#define INVALID       uint(0xFFFFFFFF)



///// Packing /////
// Packing constants
const uint depthBits = 11;
const uint xBits = 11;
const uint yBits = 10;

const uint maxDepth = (1 << depthBits) - 1;
const uint minX = -(1 << (xBits - 1));
const uint maxX =  (1 << (xBits - 1)) - 1;
const uint minY = -(1 << (yBits - 1));
const uint maxY =  (1 << (yBits - 1)) - 1;

// Pack (depth, relativePos.xy) to 11/11/10 uint
// Depth precision: 0.0004882
// RelativePos.x range: [-1024, 1023]
// RelativePos.y range: [-512, 511]
uint packReprojectionDataToUint(float depth, ivec2 sourcePos, ivec2 targetPos)
{
    uint uDepth = uint(float(maxDepth) * depth);
    ivec2 relativePos = clamp(targetPos - sourcePos, ivec2(minX, minY), ivec2(maxX, maxY));
    uvec2 uRelativePos = uvec2(relativePos - ivec2(minX, minY));

    uint result = (uDepth << (32 - depthBits)) | (uRelativePos.x << yBits) | (uRelativePos.y);

    return result;
}

float unpackDepthFromUint(uint reprojectionData)
{
    uint uDepth = reprojectionData >> (32 - depthBits);
    return float(uDepth) / float(maxDepth);
}

ivec2 unpackSourcePosFromUint(uint reprojectionData, ivec2 targetPos)
{
    uint uRelativeX = (reprojectionData >> yBits) & uint((1 << xBits) - 1);
    uint uRelativeY = reprojectionData & uint((1 << yBits) - 1);
    ivec2 relativePos = ivec2(uRelativeX, uRelativeY) + ivec2(minX, minY);
    ivec2 sourcePos = targetPos - relativePos;
    return sourcePos;
}



///// Sample /////
mediump ivec2 clampCoord(mediump ivec2 pos, mediump ivec2 offset, mediump ivec2 textureSize)
{
    mediump ivec2 result = pos + offset;
    result.x = int((offset.x < 0) ? max(result.x, 0) : result.x);
    result.x = int((offset.x > 0) ? min(result.x, textureSize.x - 1) : result.x);
    result.y = int((offset.y < 0) ? max(result.y, 0) : result.y);
    result.y = int((offset.y > 0) ? min(result.y, textureSize.y - 1) : result.y);
    return result;
}

mediump vec4 sampleWithLut(in sampler2D tex, vec2 uv, vec2 textureSize, in sampler2D lut)
{
    vec2 fPos = uv * textureSize;
    vec2 center = round(fPos);
    vec2 d = fPos - center + vec2(0.5, 0.5);

    // LUT: (32 * 4) * (32 * 4) = 128 * 128
    // 0.25 = 32 / 128
    mediump vec2 lutSampleUV = (31 * d + vec2(0.5, 0.5)) / 128.0f;
    mediump float weight00 = texture(lut, lutSampleUV).x;
    mediump float weight01 = texture(lut, lutSampleUV + vec2(0, 1) * 0.25).x;
    mediump float weight02 = texture(lut, lutSampleUV + vec2(0, 2) * 0.25).x;
    mediump float weight03 = texture(lut, lutSampleUV + vec2(0, 3) * 0.25).x;
    mediump float weight10 = texture(lut, lutSampleUV + vec2(1, 0) * 0.25).x;
    mediump float weight11 = texture(lut, lutSampleUV + vec2(1, 1) * 0.25).x;
    mediump float weight12 = texture(lut, lutSampleUV + vec2(1, 2) * 0.25).x;
    mediump float weight13 = texture(lut, lutSampleUV + vec2(1, 3) * 0.25).x;
    mediump float weight20 = texture(lut, lutSampleUV + vec2(2, 0) * 0.25).x;
    mediump float weight21 = texture(lut, lutSampleUV + vec2(2, 1) * 0.25).x;
    mediump float weight22 = texture(lut, lutSampleUV + vec2(2, 2) * 0.25).x;
    mediump float weight23 = texture(lut, lutSampleUV + vec2(2, 3) * 0.25).x;
    mediump float weight30 = texture(lut, lutSampleUV + vec2(3, 0) * 0.25).x;
    mediump float weight31 = texture(lut, lutSampleUV + vec2(3, 1) * 0.25).x;
    mediump float weight32 = texture(lut, lutSampleUV + vec2(3, 2) * 0.25).x;
    mediump float weight33 = texture(lut, lutSampleUV + vec2(3, 3) * 0.25).x;

    mediump ivec2 samplePos11 = ivec2(center - vec2(0.5, 0.5));
    mediump ivec2 iTextureSize = ivec2(textureSize);
    mediump vec4 color00 = texelFetch(tex, clampCoord(samplePos11, ivec2(-1, -1), iTextureSize), 0);
    mediump vec4 color01 = texelFetch(tex, clampCoord(samplePos11, ivec2(-1, 0), iTextureSize), 0);
    mediump vec4 color02 = texelFetch(tex, clampCoord(samplePos11, ivec2(-1, 1), iTextureSize), 0);
    mediump vec4 color03 = texelFetch(tex, clampCoord(samplePos11, ivec2(-1, 2), iTextureSize), 0);
    mediump vec4 color10 = texelFetch(tex, clampCoord(samplePos11, ivec2(0, -1), iTextureSize), 0);
    mediump vec4 color11 = texelFetch(tex, clampCoord(samplePos11, ivec2(0, 0), iTextureSize), 0);
    mediump vec4 color12 = texelFetch(tex, clampCoord(samplePos11, ivec2(0, 1), iTextureSize), 0);
    mediump vec4 color13 = texelFetch(tex, clampCoord(samplePos11, ivec2(0, 2), iTextureSize), 0);
    mediump vec4 color20 = texelFetch(tex, clampCoord(samplePos11, ivec2(1, -1), iTextureSize), 0);
    mediump vec4 color21 = texelFetch(tex, clampCoord(samplePos11, ivec2(1, 0), iTextureSize), 0);
    mediump vec4 color22 = texelFetch(tex, clampCoord(samplePos11, ivec2(1, 1), iTextureSize), 0);
    mediump vec4 color23 = texelFetch(tex, clampCoord(samplePos11, ivec2(1, 2), iTextureSize), 0);
    mediump vec4 color30 = texelFetch(tex, clampCoord(samplePos11, ivec2(2, -1), iTextureSize), 0);
    mediump vec4 color31 = texelFetch(tex, clampCoord(samplePos11, ivec2(2, 0), iTextureSize), 0);
    mediump vec4 color32 = texelFetch(tex, clampCoord(samplePos11, ivec2(2, 1), iTextureSize), 0);
    mediump vec4 color33 = texelFetch(tex, clampCoord(samplePos11, ivec2(2, 2), iTextureSize), 0);

    mediump vec4 result = vec4(0, 0, 0, 0);
    result += color00 * weight00;
    result += color01 * weight01;
    result += color02 * weight02;
    result += color03 * weight03;
    result += color10 * weight10;
    result += color11 * weight11;
    result += color12 * weight12;
    result += color13 * weight13;
    result += color20 * weight20;
    result += color21 * weight21;
    result += color22 * weight22;
    result += color23 * weight23;
    result += color30 * weight30;
    result += color31 * weight31;
    result += color32 * weight32;
    result += color33 * weight33;
    result /= (weight00 + weight01 + weight02 + weight03 + weight10 + weight11 + weight12 + weight13 + weight20 + weight21 + weight22 + weight23 + weight30 + weight31 + weight32 + weight33);
    return result;
}



void main() 
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pos) + 0.5f) * cb.presentation_size.zw;
    ivec2 scaledPos = ivec2(vec2(pos) / cb.render_scale);
    
    uint packedData = texelFetch(r_filled_reprojection, scaledPos, 0).x;
    vec2 mv_t1;
    ivec2 posBeforeReprojection = ivec2(-1, -1);
    if (packedData == INVALID)
    {
        // Fill with motion vectors from previous frame or zeros
        mv_t1 = texelFetch(r_previous_motion_vector, scaledPos, 0).xy;
        //motion = vec2(0, 0);
    }
    else
    {
        posBeforeReprojection = unpackSourcePosFromUint(packedData, scaledPos);
        mv_t1 = texelFetch(r_current_motion_vector, posBeforeReprojection, 0).xy;
    }
    
    // Linear motion estimation
    //vec2 sampleUV_t1 = uv + mv_t1 * (1.0f - cb.delta.x);
    //vec2 sampleUV_t0 = uv - mv_t1 * cb.delta.x;
    
    // Quadratic motion estimation
    vec2 sampleUV_t1;
    vec2 sampleUV_t0;
    if (posBeforeReprojection == ivec2(-1, -1))
    {
        // Fallback to linear motion estimation
        sampleUV_t1 = uv + mv_t1 * (1.0f - cb.delta.x);
        sampleUV_t0 = uv - mv_t1 * cb.delta.x;
    }
    else
    {
        vec2 uv_t1 = (vec2(posBeforeReprojection) + vec2(0.5, 0.5)) * cb.render_size.zw;
        vec2 uv_t0 = uv_t1 - mv_t1;
        vec2 mv_t0 = texture(r_previous_motion_vector, uv_t0).xy;
        sampleUV_t0 = uv + (-cb.delta.y - cb.delta.w) * mv_t1 + (-cb.delta.y + cb.delta.w) * mv_t0;
        sampleUV_t1 = mv_t1 + sampleUV_t0;
    }
    
    ivec2 samplePos_LR_t1 = ivec2(sampleUV_t1 * cb.render_size.xy);
    ivec2 samplePos_LR_t0 = ivec2(sampleUV_t0 * cb.render_size.xy);
    
    vec3 color_t1 = sampleWithLut(r_current_color_input_fg, sampleUV_t1, cb.presentation_size.xy, r_sample_lut).xyz;
    vec3 color_t0 = sampleWithLut(r_previous_color_input_fg, sampleUV_t0, cb.presentation_size.xy, r_sample_lut).xyz;
    float depth_t1 = texelFetch(r_current_depth, samplePos_LR_t1, 0).x;
    float depth_t0 = texelFetch(r_previous_depth, samplePos_LR_t0, 0).x;
    
    vec3 color;
    float depthDiff = abs(depth_t0 - depth_t1);
    if (any(lessThan(sampleUV_t0, vec2(0, 0))) || any(greaterThan(sampleUV_t0, vec2(1, 1))))
    {
        color = color_t1;    
    }
    else if (any(lessThan(sampleUV_t1, vec2(0, 0))) || any(greaterThan(sampleUV_t1, vec2(1, 1))))
    {
        color = color_t0;
    }
    else if (depthDiff < cb.depth_diff_threshold_fg)
    {
        // case 1: both t0 and t1 are valid
        vec3 colorDiff = abs(color_t1 - color_t0);
        float lumaDiff = colorDiff.r * float(0.5) + (colorDiff.b * float(0.5) + colorDiff.g);
        if (lumaDiff < cb.color_diff_threshold_fg) 
        {
            color = cb.delta.x < 0.5 ? color_t0 : color_t1;
        }
        else 
        {
            color = mix(color_t0, color_t1, cb.delta.x);
            //color = color_t0;
        }
    }
    else 
    {
        // case 2: select the one further to the camera (occlusion)
        color = depth_t1 > depth_t0 ? color_t1 : color_t0;
    }
    
    imageStore(rw_frame_generation_result, pos, vec4(color.xyz, 1));
}